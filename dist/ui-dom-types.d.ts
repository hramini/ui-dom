// Generated by dts-bundle-generator v4.0.0

import { FrameElementOption, IElement, IFrameBuilder, IPrimer, ITagBuilder, IUnit, IUnitAlterStateIn, IUnitOnBeforeUpdateOut, PrimerStartOptions, Properties, TagElementOption, VirtualDocument } from 'ui-wrapper';

export declare type TDomElement = HTMLElement;
export interface IDomUnitRunMountLifeCycleIn<P> {
	properties: P;
}
export interface IDomUnitRunUpdateLifeCycleIn<P> {
	properties: P;
}
declare abstract class DomUnit<P, S> implements IUnit<TDomElement, P, S> {
	props: Readonly<P> & Readonly<Properties<TDomElement>>;
	state: Readonly<S>;
	private providedView;
	protected doc: VirtualDocument;
	protected constructor();
	onBeforeProvide(): void;
	onAfterProvide(): void;
	onBeforeUpdate(): IUnitOnBeforeUpdateOut;
	onAfterUpdate(): void;
	onBeforeDispose(): void;
	abstract provide(): IElement<TDomElement>;
	runMountLifeCycle(param: IDomUnitRunMountLifeCycleIn<P>): void;
	runUpdateLifeCycle(param: IDomUnitRunUpdateLifeCycleIn<P>): void;
	runDisposeLifeCycle(): void;
	getProvidedView(): IElement<TDomElement>;
	forceUpdate(): void;
	alterState<K extends keyof S>(param: IUnitAlterStateIn<S, K>): void;
	private setProps;
	private updateElementInDocument;
}
export interface IDomBuilderAppendChildrenIn {
	element: TDomElement;
	children?: string | Array<string | TDomElement>;
}
export interface IDomBuilderCheckPropertyValueType {
	value: any;
	type: string;
}
export interface DomFrameElementOption<P, S> extends FrameElementOption<TDomElement, P, S> {
	name: new () => DomUnit<P, S>;
}
export declare class DomFrameBuilder implements IFrameBuilder<TDomElement> {
	private doc;
	constructor();
	buildElement<P, S>(elementOption: DomFrameElementOption<P, S>): IElement<TDomElement>;
	private checkChildrenLength;
	private appendChildrenToProperties;
	private appendKeyProperties;
}
declare abstract class DomBuilder {
	protected virtualDom: VirtualDocument;
	protected constructor();
	private checkChildren;
	protected checkPropertyValueType(param: IDomBuilderCheckPropertyValueType): boolean;
	protected appendChildren(param: IDomBuilderAppendChildrenIn): void;
}
export declare class DomTagBuilder extends DomBuilder implements ITagBuilder<TDomElement> {
	constructor();
	buildElement<P, S>(param: TagElementOption<TDomElement, P, S>): IElement<TDomElement>;
	private appendProperties;
}
export declare class DomPrimer implements IPrimer<TDomElement> {
	constructor();
	start(param: PrimerStartOptions<TDomElement>): void;
}

export {};
